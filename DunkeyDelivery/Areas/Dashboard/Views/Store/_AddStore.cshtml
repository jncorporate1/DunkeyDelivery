@model DunkeyDelivery.Areas.Dashboard.Models.ShopViewModel

<style>
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 400px;
        width: 100%;
    }

    /* Optional: Makes the sample page fill the window. */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }

    #description {
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
    }

    #infowindow-content .title {
        font-weight: bold;
    }

    #infowindow-content {
        display: none;
    }

    #map #infowindow-content {
        display: inline;
    }

    .pac-card {
        margin: 10px 10px 0 0;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        background-color: #fff;
        font-family: Roboto;
    }

    #pac-container {
        padding-bottom: 12px;
        margin-right: 12px;
    }

    .pac-controls {
        display: inline-block;
        padding: 5px 11px;
    }

        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }

    #pac-input {
        background-color: #fff;
        font-family: Roboto;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        /*width: 400px;*/
        width:93%;
    }

        #pac-input:focus {
            border-color: #4d90fe;
        }


    #title {
        color: #fff;
        background-color: #4d90fe;
        font-size: 25px;
        font-weight: 500;
        padding: 6px 12px;
    }
</style>

@using (Ajax.BeginForm("Create", "Store", new AjaxOptions { OnSuccess = "OnSuccessInsertion", OnFailure = "OnFailedInsertion" }))

{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
            <label>Business Name</label>
            @*<input type="text" name="BusinessName" placeholder="Business Name" data-val="true" class="form-control input-validation-error " data-val-required="Business Name is required" value="@Model.BusinessName">*@
            @Html.TextBoxFor(x => x.BusinessName, new { @autofocus = "", @class = "form-control", name = "BusinessName", @placeholder = "Business Name" })
            @Html.ValidationMessageFor(m => m.BusinessName, "", new { @class = "text-danger" })

        </div>
        <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
            <label>Business Type</label>
            <select id="BusinessType" name="BusinessType" class="form-control">
                <option>Food</option>
                <option>Grocery</option>
                <option>Laundry</option>
                <option>Alcohol</option>
                <option>Pharmacy</option>
                <option>Retail</option>
            </select>
            @Html.ValidationMessageFor(m => m.BusinessType, "", new { @class = "text-danger" })

        </div>

    </div>
    <div class="row">
        <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
            <label>Latitude</label>
            @*<input  type="text" name="Latitude" id="Latitude" placeholder="Latitude" class="form-control" readonly/>*@
            @Html.TextBoxFor(x => x.Latitude, new { @id = "Latitude", @class = "form-control", @readonly = "true", @placeholder = "Latitude", @value = "" })
            @Html.ValidationMessageFor(x => x.Latitude, "", new { @class = "text-danger" })

        </div>

        <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
            <label>Longitude</label>
            @*<input  type="text" name="Longitude" id="Longitude" placeholder="Longitude" class="form-control" readonly/>*@
            @Html.TextBoxFor(x => x.Longitude, new { @class = "form-control", @id = "Longitude", @placeholder = "Longitude", @readonly = "true" })
            @Html.ValidationMessageFor(m => m.Longitude, "", new { @class = "text-danger" })

        </div>
    </div>
    <div class="row">
        <div class="col-xs-12 col-md-12 col-lg-12">
            <!-- image-preview-filename input [CUT FROM HERE]-->
            <label>Upload Store Logo</label>
            <div class="input-group image-preview">
                <input type="text" class="form-control image-preview-filename" disabled="disabled"> <!-- don't give a name === doesn't send on POST/GET -->
                <span class="input-group-btn">
                    <!-- image-preview-clear button -->
                    <button type="button" id="clearImage" class="btn btn-default image-preview-clear" onclick="ClearImage()" style="display:none;">
                        <span class="glyphicon glyphicon-remove"></span> Clear
                    </button>
                    <!-- image-preview-input -->
                    <div class="btn btn-default image-preview-input">
                        <span class="glyphicon glyphicon-folder-open"></span>
                        <span class="image-preview-input-title">Browse</span>
                        <input type="file" accept="image/png, image/jpeg, image/gif" onchange="UploadImage()" id="fileInput" name="Image" /> <!-- rename it -->
                    </div>
                </span>
            </div><!-- /input-group image-preview [TO HERE]-->
        </div>
    </div>
    <div class="row">

        <div class="col-xs-12 col-md-12">
            <label>Store Description</label>
            <textarea class="form-control" name="Description" placeholder="Description"></textarea>
            @*@Html.TextBoxFor(x => x.Description, new { @autofocus = "", @class = "form-control", name = "Description", @placeholder = "Description" })*@
            @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" style="margin-top:20px;border:1px solid black;">

        <div id="map"></div>
    </div>



    <div class="ln_solid"></div>


    @Html.ValidationMessage("Error")



    <div class="pac-card col-sm-12 col-xs-12 col-lg-5 " id="pac-card" draggable="" style="padding-right:0px;padding-left:0px;">
        <div>

            <div id="title">
                Mark Your Location
            </div>
            <div class="row">
                <div id="type-selector" class="pac-controls">
                    <div class="col-md-12">
                        <input type="radio" name="type" id="changetype-all" checked="checked">
                        <label for="changetype-all">All</label>

                        <input type="radio" name="type" id="changetype-establishment">
                        <label for="changetype-establishment">Establishments</label>
                        <input type="radio" name="type" id="changetype-address">
                        <label for="changetype-address">Addresses</label>
                        <input type="radio" name="type" id="changetype-geocode">
                        <label for="changetype-geocode">Geocodes</label>
                        <input type="checkbox" id="use-strict-bounds" value="">
                        <label for="use-strict-bounds">Strict Bounds</label>
                        @*<div id="strict-bounds-selector" class="pac-controls">

                            </div>*@
                    </div>
                </div>
            </div>
            <div id="pac-container" class="container">
                <div class="col-md-12 col-sm-12 col-xs-12">
                    <input id="pac-input" class="form-control" type="text"
                           placeholder="Enter a location">
                </div>
                </div>
            </div>
            <div id="infowindow-content">
                <img src="" width="16" height="16" id="place-icon">
                <span id="place-name" class="title"></span><br>
                <span id="place-address"></span>
            </div>

        </div>





        <div class="alert alert-success" id="success-alert" hidden>
            <button type="button" class="close" data-dismiss="alert">x</button>
            <strong>Success! </strong> <span> </span>
        </div>

        <div class="alert alert-error" id="error-alert" hidden>
            <button type="button" class="close" data-dismiss="alert">x</button>
            <strong>Error! </strong> <span> </span>
        </div>
        <div class="form-group">
            <div class="col-md-12 col-sm-12 col-xs-12 text-right">
                <button class="btn btn-primary" onclick="clear_errors()" type="reset">Reset</button>
                <button type="submit" class="btn btn-success">Submit</button>
            </div>

        </div>
        }
        <script>

            function OnResetClick() {
                $("#clearImage").trigger("click");
            }

            function UploadImage() {
                var formdata = new FormData(); //FormData object
                var fileInput = document.getElementById('fileInput');
                //Iterating through each files selected in fileInput
                for (i = 0; i < fileInput.files.length; i++) {
                    //Appending each file to FormData object
                    formdata.append(fileInput.files[i].name, fileInput.files[i]);
                }
                //Creating an XMLHttpRequest and sending
                var xhr = new XMLHttpRequest();
                xhr.open('POST', 'Store/UploadImage');
                xhr.send(formdata);
                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4 && xhr.status == 200) {
                        //alert(xhr.responseText);
                    }
                }
                return false;
            }

            function ClearImage() {
                var xhr = new XMLHttpRequest();
                xhr.open('POST', '/Store/DeleteImage');
                xhr.send("Clear");
            }

            function initMap() {

                var map = new google.maps.Map(document.getElementById('map'), {
                    center: { lat: -33.8688, lng: 151.2195 },
                    zoom: 16
                });
                var card = document.getElementById('pac-card');
                var input = document.getElementById('pac-input');
                var types = document.getElementById('type-selector');
                var strictBounds = document.getElementById('strict-bounds-selector');

                map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

                var autocomplete = new google.maps.places.Autocomplete(input);

                // Bind the map's bounds (viewport) property to the autocomplete object,
                // so that the autocomplete requests use the current map bounds for the
                // bounds option in the request.
                autocomplete.bindTo('bounds', map);

                var infowindow = new google.maps.InfoWindow();
                var infowindowContent = document.getElementById('infowindow-content');
                infowindow.setContent(infowindowContent);
                var marker = new google.maps.Marker({
                    map: map,
                    anchorPoint: new google.maps.Point(0, -29)
                });

                google.maps.event.addListener(map, 'click', function (event) {
                    placeMarker(event.latLng);
                    $("#Longitude").val(event.latLng.lng);
                    $("#Latitude").val(event.latLng.lat);
                    $('#Latitude').trigger('change');
                    $('#Longitude').trigger('change');
                });

                function placeMarker(location) {
                    if (!marker || !marker.setPosition) {
                        marker = new google.maps.Marker({
                            position: location,
                            map: map,
                        });
                    } else {
                        marker.setPosition(location);
                    }
                    //if (!!infowindow && !!infowindow.close) {
                    //    infowindow.close();
                    //}
                    //infowindow = new google.maps.InfoWindow({
                    //    content: 'Latitude: ' + location.lat() + '<br>Longitude: ' + location.lng()
                    //});
                    //infowindow.open(map, marker);
                }

                //function placeMarker(location) {
                //    var marker = new google.maps.Marker({
                //        position: location,
                //        map: map
                //    });
                //}

                autocomplete.addListener('place_changed', function () {
                    infowindow.close();
                    marker.setVisible(false);
                    var place = autocomplete.getPlace();
                    if (!place.geometry) {
                        // User entered the name of a Place that was not suggested and
                        // pressed the Enter key, or the Place Details request failed.
                        window.alert("No details available for input: '" + place.name + "'");
                        return;
                    }

                    // If the place has a geometry, then present it on a map.
                    if (place.geometry.viewport) {
                        map.fitBounds(place.geometry.viewport);
                    } else {
                        map.setCenter(place.geometry.location);
                        map.setZoom(17);  // Why 17? Because it looks good.
                    }
                    marker.setPosition(place.geometry.location);
                    marker.setVisible(true);

                    var address = '';
                    if (place.address_components) {
                        address = [
                          (place.address_components[0] && place.address_components[0].short_name || ''),
                          (place.address_components[1] && place.address_components[1].short_name || ''),
                          (place.address_components[2] && place.address_components[2].short_name || '')
                        ].join(' ');
                    }

                    infowindowContent.children['place-icon'].src = place.icon;
                    infowindowContent.children['place-name'].textContent = place.name;
                    infowindowContent.children['place-address'].textContent = address;
                    infowindow.open(map, marker);

                    $("#Longitude").val(place.geometry.location.lng());
                    $("#Latitude").val(place.geometry.location.lat());
                    $('#Latitude').trigger('change');
                    $('#Longitude').trigger('change');
                });

                // Sets a listener on a radio button to change the filter type on Places
                // Autocomplete.
                function setupClickListener(id, types) {
                    var radioButton = document.getElementById(id);
                    radioButton.addEventListener('click', function () {
                        autocomplete.setTypes(types);
                    });
                }

                setupClickListener('changetype-all', []);
                setupClickListener('changetype-address', ['address']);
                setupClickListener('changetype-establishment', ['establishment']);
                setupClickListener('changetype-geocode', ['geocode']);

                document.getElementById('use-strict-bounds')
                    .addEventListener('click', function () {
                        console.log('Checkbox clicked! New state=' + this.checked);
                        autocomplete.setOptions({ strictBounds: this.checked });
                    });

                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function (position) {
                        var pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        map.setCenter(pos);
                        placeMarker(pos);
                        $("#Longitude").val(pos.lng);
                        $("#Latitude").val(pos.lat);
                    }, function () {
                        handleLocationError(true, infoWindow, map.getCenter());
                    });
                }
            }

            //google.maps.event.addListener(map, 'bounds_changed', function () {
            //    alert(map.getBounds());
            //});
            function OnSuccessStoreInsertion() {
                //$("#success-alert").append("Store updated successfully.");
                $("#success-alert").fadeTo(2000, 500).slideUp(500, function () {
                    $("#success-alert").slideUp(500);
                });
                $("#StoreName").val('');
                $("#Longitude").val('');
                $("#Latitude").val('');
                $("#clearImage").trigger("click");
            }

            $(document).ready(function () {
                $("#Latitude").val("");
                $("#Longitude").val("");
                $('input[id$=Longitude]').bind("change", function () {
                    var a = $('span[data-valmsg-for="Long"]').empty();
                });
                $('input[id$=Latitude]').bind("change", function () {
                    var a = $('span[data-valmsg-for="Lat"]').empty();
                });
            });


        </script>
        <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDQsM3CYgTwF_35w-Qc2N8FlZGDfKASYsU&callback=initMap&libraries=places"
                type="text/javascript"></script>



