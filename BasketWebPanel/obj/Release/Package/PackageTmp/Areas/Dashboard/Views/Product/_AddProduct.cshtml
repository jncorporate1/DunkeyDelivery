@model BasketWebPanel.Areas.Dashboard.Models.AddProductViewModel
<div class="alert alert-success" id="success-alert" hidden>
    <button type="button" class="close" data-dismiss="alert">x</button>
    <strong>Success! </strong><span> </span>
</div>
<div class="alert alert-error" id="error-alert" hidden>
    <button type="button" class="close" data-dismiss="alert">x</button>
    <strong>Error! </strong> <span> </span>
</div>
<style>
    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        margin: 0;
    }
</style>
@using (Ajax.BeginForm("AddUpdateProduct", "Product", new AjaxOptions { OnSuccess = "OnSuccessProductInsertion", OnFailure = "OnFailedInsertion", LoadingElementId = "divLoader" }, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="x_panel">
        <div class="x_title">

            @if (Model.Product.Id == 0)
                {
                <h3>Add New Product</h3>
            }
            else
            {
                <h3>Edit Product</h3>
            }


            @*<ul class="nav navbar-right panel_toolbox">
                <li>
                <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                </li>

                <li>
                <a class="close-link"><i class="fa fa-close"></i></a>
                </li>
                </ul>*@
            <div class="clearfix"></div>
        </div>
        <div class="x_content">
            <br />
            <input type="hidden" name="Product.Id" value="@Model.Product.Id" />
            <div class="row">
                <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                    <label>Product Name</label>
                    <input type="text" autofocus data-val="true" class="form-control input-validation-error" name="Product.Name" id="ProductName" data-val-required="Product Name is required" placeholder="Product Name" value="@Model.Product.Name">
                    @Html.ValidationMessageFor(m => m.Product.Name, "", new { @class = "text-danger" })
                </div>
                <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                    <label>Product Price</label>
                    @* <input type="text" data-val="true" class="form-control input-validation-error" name="Price" id="Price" data-val-required="Price is required" placeholder="Product Price" value="@Model.Price">*@
                    @Html.TextBoxFor(x => x.Product.Price, new { @class = "form-control", @id = "Price", @placeholder = "Product Price", @type = "text" })
                    @Html.ValidationMessageFor(m => m.Product.Price, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                    <label>Store</label>
                    @Html.DropDownList("Product.Store_Id", new SelectList(Model.StoreOptions.Items,
                "value", "Text", Model.StoreOptions.SelectedValue), new { @class = "form-control", onchange = "AddProduct_OnStoreChange()" })
                    @*<select class="form-control">
                        <option>KFC</option>
                        <option>McDonald</option>
                        <option>Coffee Planet</option>
                        </select>*@
                </div>
                <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                    <label>Category</label>
                    @Html.DropDownList("Product.Category_Id", new SelectList(Model.CategoryOptions.Items,
                "value", "Text", Model.CategoryOptions.SelectedValue), new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Product.Category_Id, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row">
                <div class="col-xs-12 col-md-12 col-xs-12">
                    <!-- image-preview-filename input [CUT FROM HERE]-->
                    @*@if (Model.Product.Id == 0)
                        {*@
                    <div id="UploadImage">
                        <label>Upload Product Image</label>
                        <div class="input-group image-preview">
                            <input type="text" class="form-control image-preview-filename" disabled="disabled"> <!-- don't give a name === doesn't send on POST/GET -->
                            <span class="input-group-btn">
                                <!-- image-preview-clear button -->
                                <button type="button" id="clearImage" class="btn btn-default image-preview-clear" onclick="ClearImage()" style="display:none;">
                                    <span class="glyphicon glyphicon-remove"></span> Clear
                                </button>
                                <!-- image-preview-input -->
                                <div class="btn btn-default image-preview-input">
                                    <span class="glyphicon glyphicon-folder-open"></span>
                                    <span class="image-preview-input-title">Browse</span>
                                    <input type="file" accept="image/png, image/jpeg, image/gif" onchange="UploadImage()" id="fileInput" name="Image" /> <!-- rename it -->
                                </div>
                            </span>
                        </div><!-- /input-group image-preview [TO HERE]-->
                    </div>
                    @*}
                        else
                        {*@
                    <div id="EditImage">
                        <label>Product Image</label>
                        <div class="row">
                            <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                                <input id="editImage" type="image" src="@Model.Product.Image" alt="" width="48" height="48">
                            </div>
                        </div>
                        <button id="btnEditImg" title="Edit" class="btn btn-primary btn-xs editButtons" data-title="Edit" data-productid="8" data-toggle="modal" data-target="#edit"><span class="glyphicon glyphicon-pencil"></span></button>
                        <button id="btnDeleteImg" title="Delete" onclick="EditDivDeletePic()" class="btn btn-danger btn-xs deleteButtons" data-title="Delete" data-productid="8" data-toggle="modal" data-target="#deleteModal"><span class="glyphicon glyphicon-trash"></span></button>
                    </div>

                    <div hidden id="HasImage1">@Model.Product.Image</div>
                    @*}*@


                </div>
                @*<label style="padding-left:10px" id="ImageError" class="text-danger"></label>*@
            </div>
            <div class="row">
                <div class="col-xs-12 col-md-12 col-xs-12">
                    <label>Product Description</label>
                    @Html.TextAreaFor(x => x.Product.Description, new { @class = "form-control", placeholder = "Product Description", id = "ProductDescription" })
                    @*<textarea type="text" class="form-control" id="ProductDescription" placeholder="Product Description" name="@Model.Description"></textarea>*@
                </div>
            </div>
        </div>
        @*<div class="ln_solid"></div>*@
        <div class="form-group">
            <div class="col-md-12 col-sm-12 col-xs-12 text-right">
                <button id="btnReset" onclick="OnResetClick()" class="btn btn-primary" type="reset">Reset</button>
                <button type="submit" class="btn btn-success">Submit</button>
            </div>
        </div>
    </div>
}

@Scripts.Render("~/bundles/jquery")
<script>


    //$("#divLoader").center();

    function OnResetClick() {
        $("#clearImage").trigger("click");
        ClearValidationErrorMessages();
    }

    function OnSuccessProductInsertion() {
        //$("#success-alert").append("Store updated successfully.");
        $("#success-alert").fadeTo(2000, 500).slideUp(500, function () {
            $("#success-alert").slideUp(500);
        });
        $("#ProductName").val('');
        $("#Price").val('');
        $("#CatId").val('0');
        $("#clearImage").trigger("click");
    }

    function UploadImage() {
        var AllowedFileTypes = ["image/jpeg", "image/png", "image/jpg"];
        var formdata = new FormData(); //FormData object
        var fileInput = document.getElementById('fileInput');
        //Iterating through each files selected in fileInput
        var file = fileInput.files[0];
        //for (i = 0; i < fileInput.files.length; i++) {
        //    //Appending each file to FormData object
        //    formdata.append(fileInput.files[i].name, fileInput.files[i]);
        //}
        formdata.append(file.name, file);
        if (AllowedFileTypes.indexOf(file.type) == -1) {
            $("#ImageError").text("Only .Jpeg & .Png files are allowed.");
            $("#clearImage").trigger("click");
            return false;
        }
        else {
            $("#ImageError").text("");
            //Creating an XMLHttpRequest and sending
            var xhr = new XMLHttpRequest();
            xhr.open('POST', 'Product/UploadImage');
            xhr.send(formdata);
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    //alert(xhr.responseText);
                }
            }
            return false;
        }
    }

    function ClearImage() {
        var xhr = new XMLHttpRequest();
        xhr.open('POST', 'Product/DeleteImage');
        xhr.send("Clear");
    }

    function EditDivDeletePic() {
        $('#EditImage').hide();
        $('#UploadImage').show();
    }


</script>
