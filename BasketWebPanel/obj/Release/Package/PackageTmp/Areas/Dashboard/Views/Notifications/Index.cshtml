@model BasketWebPanel.Areas.Dashboard.Models.AddNotificationsViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="right_col" role="main">
    <div class="row">
        <div class="col-md-12 col-xs-12">
            @Html.AntiForgeryToken()
            <div class="alert alert-success" id="success-alert" hidden>
                <button type="button" class="close" data-dismiss="alert">x</button>
                <strong>Success! </strong>
            </div>
            <div class="alert alert-error" id="error-alert" hidden>
                <button type="button" class="close" data-dismiss="alert">x</button>
                <strong>Error! </strong> <span> </span>
            </div>
            <form data-ajax="true" data-ajax-loading="#divLoader" id="frmAddNotification" method="post" novalidate="novalidate">
                @Html.AntiForgeryToken()
                <div class="x_panel">
                    <div class="x_title">
                        @if (Model.Notification.Id == 0)
                        {
                            <h2>Add New Notification</h2>
                        }
                        else
                        {
                            <h2>Edit Notification</h2>
                        }
                        <div class="clearfix"></div>
                    </div>
                    <div class="x_content">
                        <input type="hidden" id="NotiId" name="Notification.Id" value="@Model.Notification.Id" />
                        <div class="form-group">
                            <label>Title</label>
                            <input type="text" autofocus data-val="true" class="form-control input-validation-error" name="Notification.Title" id="NotTitle" data-val-required="This field is required" placeholder="Notification Title" value="@Model.Notification.Title">
                            @Html.ValidationMessageFor(m => m.Notification.Title, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            <div>
                                <label>Target Audience</label>
                                @Html.DropDownList("Notifications.TargetAudience", new SelectList(Model.TargetOptions.Items,
                "value", "Text", Model.TargetOptions.SelectedValue), new { @Id= "aioTargetAudience", @class = "form-control" })
                            </div>
                        </div>
                        <div class="row" hidden>
                            <div class="col-xs-12 col-md-12 col-xs-12">
                                <div id="UploadImage" hidden>
                                    <label>Upload Category Image</label>
                                    <div class="input-group image-preview" style="margin-bottom:0px">
                                        <input type="text" name="Category.ImageUrl" id="txtImageUrl" data-val="true" data-val-required="Please select an image" class="form-control image-preview-filename input-validation-error" readonly> <!-- don't give a name === doesn't send on POST/GET -->
                                        <span class="input-group-btn">
                                            <!-- image-preview-clear button -->
                                            <button type="button" id="clearImage" class="btn btn-default image-preview-clear" onclick="ClearImage()" style="display:none;">
                                                <span class="glyphicon glyphicon-remove"></span> Clear
                                            </button>
                                            <!-- image-preview-input -->
                                            <div class="btn btn-default image-preview-input">
                                                <span class="glyphicon glyphicon-folder-open"></span>
                                                <span class="image-preview-input-title">Browse</span>
                                                <input type="file" accept="image/png, image/jpeg, image/gif" onchange="UploadImage()" id="fileInput" name="Image" /> <!-- rename it -->
                                            </div>
                                        </span>
                                    </div>
                                    @Html.ValidationMessageFor(m => m.Notification.ImageUrl, "", new { @class = "text-danger", @Id = "errImageUrl" })
                                    <!-- /input-group image-preview [TO HERE]-->
                                </div>
                                <div id="EditImage" hidden>
                                    <label>Notification Image</label>
                                    <div class="row">
                                        <div class="col-md-6 col-sm-6 col-xs-12 form-group has-feedback">
                                            <img src="@ApiCall.BaseUrl@Model.Notification.ImageUrl" alt="" width="48" height="48">
                                        </div>
                                    </div>
                                    @* <button id="btnEditImg" onclick="EditDivDeletePic()" title="Edit" class="btn btn-primary btn-xs editButtons" data-title="Edit" data-productid="8" data-toggle="modal" data-target="#edit"><span class="glyphicon glyphicon-pencil"></span></button>*@
                                    <button id="btnDeleteImg" title="Delete" onclick="EditDivDeletePic()" class="btn btn-danger btn-xs deleteButtons" data-title="Delete" data-productid="8" data-toggle="modal" data-target="#deleteModal"><span class="glyphicon glyphicon-trash"></span></button>
                                </div>
                                <div hidden id="HasImage1">@Model.Notification.ImageUrl</div>
                            </div>
                            <span style="padding-left:10px" id="ImageError" class="text-danger"></span>
                        </div>
                        <div class="col-xs-12 col-md-12 col-xs-12 form-group" style="padding-left:0px">
                            <label>Description</label>
                            @Html.TextAreaFor(x => x.Notification.Description, new { @class = "form-control", placeholder = "Description", id = "Description" })
                            @Html.ValidationMessageFor(m => m.Notification.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-12 col-sm-12 col-xs-12 text-right">
                            <button class="btn btn-primary" onclick="ClearValidationErrorMessages()" type="reset">Reset</button>
                            <button type="submit" class="btn btn-success">Submit</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
<script>
    $(document).ready(function () {
        var NotId = $("#NotiId").val();
        var editImageVal = $('#HasImage1').text();
        if (NotId == "" || editImageVal == "") {
            $('#EditImage').hide();
            $('#UploadImage').show();
        }
        else {
            $('#EditImage').show();
            $('#UploadImage').hide();
            $("#txtImageUrl").val(editImageVal);
        }
    });

    function UploadImage() {
        var AllowedFileTypes = ["image/jpeg", "image/png", "image/jpg"];
        var formdata = new FormData(); //FormData object
        var fileInput = document.getElementById('fileInput');

        var file = fileInput.files[0];

        formdata.append(file.name, file);
        if (AllowedFileTypes.indexOf(file.type) == -1) {
            $("#ImageError").text("Only .Jpeg & .Png files are allowed.");
            $("#clearImage").trigger("click");
            return false;
        }
        else {
            $("#ImageError").text("");
            //Creating an XMLHttpRequest and sending
            var xhr = new XMLHttpRequest();
            xhr.open('POST', 'Categories/UploadImage');
            xhr.send(formdata);
            xhr.onreadystatechange = function () {
                if (xhr.readyState == 4 && xhr.status == 200) {
                    document.getElementById("errImageUrl").innerHTML = '';
                }
            }
            return false;
        }
    }

    function ClearImage() {
        var xhr = new XMLHttpRequest();
        xhr.open('POST', 'Categories/DeleteImage');
        xhr.send("Clear");
        $("#txtImageUrl").val('');
    }

    function EditDivDeletePic() {
        $('#EditImage').hide();
        $('#UploadImage').show();
        DeleteImageOnEdit();
    }

    function DeleteImageOnEdit() {
        var xhr = new XMLHttpRequest();
        var url = '@Url.Action("DeleteImage","Categories")'
        xhr.open('POST', url);
        xhr.send("Clear");
        $("#txtImageUrl").val('');
    }

    function OnNotificationSuccessInsertion() {
        window.location.href = "@Url.Action("ManageNotifications", "Notifications")";
    }

    // Handle form submission event
    $('#frmAddNotification').on('submit', function (e) {
        // Prevent actual form submission
        e.preventDefault();

        var postData = {
            Title: $('#NotTitle').val(),
            Description: $('#Description').val(),
            TargetAudience: $('#aioTargetAudience').find(":selected").val()
        }

        addAntiForgeryToken(postData);

        // Submit form data via Ajax
        $.ajax({
            type: "POST",
            url: '@Url.Action("Index", "Notifications")',
            data: postData,
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                OnFailedInsertion(XMLHttpRequest, textStatus, errorThrown)
            },
            success: function (data) {
                OnNotificationSuccessInsertion()
            }

        });
        return false;
    });
</script>

